# Это реализация быстрой сортировки (Quick Sort),
# которая использует рекурсию для деления списка на три части:
# элементы меньше, равные и больше опорного, а затем объединяет отсортированные части.

def quick_sort(s):  # Определяем функцию быстрой сортировки с аргументом s (список)

    # Базовый случай рекурсии: если длина списка меньше или равна 1, возвращаем его как есть
    if len(s) <= 1:
        return s

    element = s[0]  # Берем первый элемент списка в качестве опорного элемента (pivot)

    # Создаем список элементов, которые меньше опорного, используя filter и лямбда-функцию
    left = list(filter(lambda i: i < element, s))

    # Создаем список элементов, равных опорному, с помощью генератора списков
    center = [i for i in s if i == element]

    # Создаем список элементов, которые больше опорного, с помощью filter и лямбда-функции
    right = list(filter(lambda i: i > element, s))

    # Рекурсивно вызываем quick_sort для левой и правой частей списка, а затем соединяем результат
    return quick_sort(left) + center + quick_sort(right)


# Вызываем функцию quick_sort с примерным списком и выводим результат на экран
print(quick_sort([5, 2, 9, 0, 1, 5, 3]))


